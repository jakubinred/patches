Binary files a/.DS_Store and b/.DS_Store differ
diff --color -ruN a/modules/leaflet_views/leaflet_views.routing.yml b/modules/leaflet_views/leaflet_views.routing.yml
--- a/modules/leaflet_views/leaflet_views.routing.yml	2024-11-06 22:46:31
+++ b/modules/leaflet_views/leaflet_views.routing.yml	2024-11-26 21:33:18
@@ -8,3 +8,9 @@
     parameters:
       entity:
         type: entity:{entity_type}
+leaflet_views.ajax_view_popup:
+  path: '/leaflet-ajax-path-popup/{view_id}/{view_display}/{arguments}/{identifier}'
+  defaults:
+    _controller: '\Drupal\leaflet_views\Controller\LeafletAjaxViewPopupController::popupBuild'
+  requirements:
+    _permission: 'access content'
\ No newline at end of file
diff --color -ruN a/modules/leaflet_views/src/Controller/LeafletAjaxViewPopupController.php b/modules/leaflet_views/src/Controller/LeafletAjaxViewPopupController.php
--- a/modules/leaflet_views/src/Controller/LeafletAjaxViewPopupController.php	1970-01-01 01:00:00
+++ b/modules/leaflet_views/src/Controller/LeafletAjaxViewPopupController.php	2024-11-26 21:33:18
@@ -0,0 +1,75 @@
+<?php
+
+namespace Drupal\leaflet_views\Controller;
+
+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\Ajax\ReplaceCommand;
+use Drupal\Core\Controller\ControllerBase;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\views\Views;
+
+/**
+ * Default controller for the leaflet_views_ajax_view_popup module.
+ */
+class LeafletAjaxViewPopupController extends ControllerBase {
+
+  /**
+   * The Renderer service property.
+   *
+   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   */
+  protected $renderer;
+
+  /**
+   * Constructs a new LeafletAjaxPopupController object.
+   *
+   * @param \Drupal\Core\Render\RendererInterface $renderer
+   *   The renderer.
+   */
+  public function __construct(RendererInterface $renderer) {
+    $this->renderer = $renderer;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('renderer')
+    );
+  }
+
+  /**
+   * Leaflet Ajax Path Popup build callback..
+   *
+   * @param string $view_id
+   *   View ID.
+   * @param string $view_display
+   *   View display mode.
+   * @param string $arguments
+   *   The arguments to pass to the View.
+   * @param string $identifier
+   *   CSS identifier for ajax replace.
+   *
+   * @return \Symfony\Component\HttpFoundation\Response
+   *   The Response to return.
+   */
+  public function popupBuild($view_id, $view_display, $arguments, $identifier) {
+    $arguments = base64_decode($arguments);
+    $selector = base64_decode($identifier);
+    $args = explode("/", $arguments);
+
+    $view = $view = Views::getView($view_id);
+    $view->setDisplay($view_display);
+    $view->setArguments($args);
+    $view->execute();
+    $render = $view->render();
+    $build = $this->renderer->renderRoot($render);
+
+    $response = new AjaxResponse();
+    $response->addCommand(new ReplaceCommand($selector, $build));
+    return $response;
+  }
+
+}
diff --color -ruN a/modules/leaflet_views/src/Plugin/views/style/LeafletMap.php b/modules/leaflet_views/src/Plugin/views/style/LeafletMap.php
--- a/modules/leaflet_views/src/Plugin/views/style/LeafletMap.php	2024-11-06 22:46:31
+++ b/modules/leaflet_views/src/Plugin/views/style/LeafletMap.php	2024-11-26 21:33:19
@@ -977,6 +977,12 @@
                   $popup_source = !empty($this->options['description_field']) ? $this->options['description_field'] : ($this->options['leaflet_popup']['value'] ?? '');
                   $popup_view_mode = !empty($this->options['view_mode']) ? $this->options['view_mode'] : $this->options['leaflet_popup']['view_mode'];
 
+                  // Define possible tokens.
+                  $tokens = [];
+                  foreach ($this->rendered_fields[$result->index] as $field_name => $field_value) {
+                    $tokens[$field_name] = $field_value;
+                  }
+
                   switch ($popup_source) {
                     case '#rendered_entity':
                       $build = $this->entityManager->getViewBuilder($entity_type)
@@ -1011,7 +1017,27 @@
                       ];
                       $popup_content = $this->renderer->renderPlain($render_row);
                       break;
+                      
+                    case '#rendered_view_ajax':
+                        $view_id = $this->options['leaflet_popup']['view_id'];
+                        $view_display = $this->options['leaflet_popup']['view_display'];
+                        $arg_tokens = $this->options['leaflet_popup']['view_arguments'];
 
+                        $arguments = str_replace(["\n", "\r"], "", $this->viewsTokenReplace($arg_tokens, $tokens));
+                        $parameters = [
+                          'view_id' => $view_id,
+                          'view_display' => $view_display,
+                          'arguments' => base64_encode($arguments),
+                          'identifier' => base64_encode(LeafletAjaxPopupController::getPopupIdentifierSelector($entity_type, $entity->id(), base64_encode($arguments), $langcode)),
+                        ];
+                        
+                        $url = Url::fromRoute('leaflet_views.ajax_view_popup', $parameters);
+                        $popup_content = sprintf('<div class="leaflet-ajax-popup" data-leaflet-ajax-popup="%s" %s></div>',
+                        $url->toString(), LeafletAjaxPopupController::getPopupIdentifierAttribute($entity_type, $entity->id(), base64_encode($arguments), $langcode));
+                        
+                        $map['settings']['ajaxPoup'] = TRUE;
+                        break;
+
                     default:
                       // Row rendering of single specified field value (without
                       // labels).
@@ -1033,12 +1059,6 @@
                     $this->options['icon'] = array_replace($map['icon'], $this->options['icon']);
                   }
 
-                  // Define possible tokens.
-                  $tokens = [];
-                  foreach ($this->rendered_fields[$result->index] as $field_name => $field_value) {
-                    $tokens[$field_name] = $field_value;
-                  }
-
                   $icon_type = $this->options['icon']['iconType'] ?? 'marker';
 
                   // Relates each result feature with additional properties.
@@ -1304,6 +1324,10 @@
     $options['entity_source'] = ['default' => '__base_table'];
     $options['name_field'] = ['default' => ''];
     $options['weight'] = ['default' => NULL];
+    $options['view_mode'] = ['default' => 'full'];
+    $options['view_arguments'] = ['default' => ''];
+    $options['view_id'] = ['default' => ''];
+    $options['view_display'] = ['default' => 'default'];
 
     $leaflet_map_default_settings = [];
     foreach (self::getDefaultSettings() as $k => $setting) {
diff --color -ruN a/src/LeafletSettingsElementsTrait.php b/src/LeafletSettingsElementsTrait.php
--- a/src/LeafletSettingsElementsTrait.php	2024-11-06 22:46:31
+++ b/src/LeafletSettingsElementsTrait.php	2024-11-26 21:33:18
@@ -6,6 +6,7 @@
 use Drupal\Core\Url;
 use Drupal\Component\Serialization\Json;
 use Drupal\views\Plugin\views\ViewsPluginInterface;
+use Drupal\views\Views;
 
 /**
  * Class LeafletSettingsElementsTrait.
@@ -964,6 +965,10 @@
           '#rendered_entity_ajax' => $this->t('< @entity entity via ajax >', ['@entity' => $entity_type]),
           '#rendered_view_fields' => $this->t('# Rendered View Fields (with field label, format, classes, etc)'),
         ];
+
+        $popup_options += [
+          '#rendered_view_ajax' => $this->t('< render View via ajax >'),
+        ];
       }
 
       // Define the Popup source and Popup view mode with backward
@@ -1009,6 +1014,54 @@
         '#states' => [
           'invisible' => [
             'select[name="' . $leaflet_popup_selector . '"]' => ['value' => ''],
+          ],
+        ],
+      ];
+
+      $view_options = [];
+      
+      foreach (Views::getEnabledViews() as $view_id => $view) {
+        $view_options[$view_id] = $view->label();
+      }
+      natcasesort($view_options);
+      
+      $element['leaflet_popup']['view_id'] = [
+        '#type' => 'select',
+        '#title' => $this->t('View to show in popup'),
+        '#default_value' => $settings['leaflet_popup']['view_id'],
+        '#options' => $view_options,
+        '#states' => [
+          'visible' => [
+            ':input[name="' . $leaflet_popup_selector . '"]' => [
+              ['value' => '#rendered_view_ajax'],
+            ],
+          ],
+        ],
+      ];
+
+      $element['leaflet_popup']['view_display'] = [
+        '#type' => 'textfield',
+        '#title' => $this->t('View display ID'),
+        '#default_value' => $settings['leaflet_popup']['view_display'],
+        '#states' => [
+          'visible' => [
+            ':input[name="' . $leaflet_popup_selector . '"]' => [
+              ['value' => '#rendered_view_ajax'],
+            ],
+          ],
+        ],
+      ];
+
+      $element['leaflet_popup']['view_arguments'] = [
+        '#type' => 'textfield',
+        '#title' => $this->t('View arguments'),
+        '#description' => $this->t('Delimit arguments with / if more than one. Token replacement is allowed (see "Replacement Patterns" below).'),
+        '#default_value' => $settings['leaflet_popup']['view_arguments'],
+        '#states' => [
+          'visible' => [
+            ':input[name="' . $leaflet_popup_selector . '"]' => [
+              ['value' => '#rendered_view_ajax'],
+            ],
           ],
         ],
       ];
